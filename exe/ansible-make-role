#!/usr/bin/env ruby

require 'ansible_make_role.rb'
require "shellopts"

USAGE = "c,clean f,force g,git +r,roles=DIR v,verbose version -- DIRECTORY..."

DEFAULT_ROLES_DIR = "./roles"

clean = false
force = false
git = false
roles_dirs = [] # A roles (plural) directory containing role (singular) directories
verbose = false

args = ShellOpts.process(USAGE, ARGV) { |opt, arg|
  case opt
    when '-c', '--clean'; clean = true
    when '-f', '--force'; force = true
    when '-g', '--git'; git = true
    when '-r', '--roles'
      File.directory?(arg) or ShellOpts::error "Not a directory: #{arg}"
      roles_dirs << arg
    when '-v', '--verbose'; verbose = true
    when '--version'; puts "ansible-make-role #{AnsibleMakeRole::VERSION}"; exit
  end
}

AnsibleMakeRole.force = force
AnsibleMakeRole.git = git
if verbose
  def verb(*msgs) print(msgs.join, "\n") end
else
  def verb(*_) end
end

if args.empty? && roles_dirs.empty? 
  if File.directory?(DEFAULT_ROLES_DIR)
    roles_dirs << DEFAULT_ROLES_DIR
  else
    ShellOpts::error "No role_dirs given"
  end
end

role_dirs = args
for roles_dir in roles_dirs
  role_dirs += Dir["#{roles_dir}/*/role.yml"].map { |f| File.dirname(f) }
end

if role_dirs.empty?
  $stderr.puts "#{PROGRAM}: No role_dirs found"
  exit 0
end

begin
  for role_dir in role_dirs
    if clean
      if AnsibleMakeRole.clean(role_dir)
        verb("Cleaned #{role_dir}")
      else
        verb("Skipped #{role_dir} - already clean")
      end
    else
      if AnsibleMakeRole.make(role_dir)
        verb("Updated #{role_dir}")
      else
        verb("Skipped #{role_dir} - up to date")
      end
    end
  end
rescue AnsibleMakeRole::Error => ex
  ShellOpts::fail(ex.message)
end
  
